{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to XLanOps Pages Site Link This site contains documentation from various projects that I have worked on over the years. Mostly for re-creating and building new systems or projects.","title":"Home"},{"location":"#welcome-to-xlanops-pages-site","text":"This site contains documentation from various projects that I have worked on over the years. Mostly for re-creating and building new systems or projects.","title":"Welcome to XLanOps Pages Site"},{"location":"adjoin/","text":"Active Directory Join - Ubuntu Desktop Windows Server Domain Controller Ubuntu client: (ver 18.04 / 18.10 / 19.4) Realmd configuration Join the Ubuntu machine on the AD domain: (Kerberos) Final Check: Active Directory Join - Ubuntu Desktop Link Windows Server Domain Controller Link Static IP: 192.168.0.15 /24 domain: my.domain server: server User account: test.user Features (Roles): ADDS (Domain contorller) DHCP DNS Ubuntu client: (ver 18.04 / 18.10 / 19.4) Link Open terminal, Install Required Packages. During the installation fill in your AD Domain information. Most be in captial or this will fail. sudo apt update sudo apt - get - y install realmd sssd sssd - tools samba - common krb5 - user packagekit samba - common - bin samba - libs adcli ntp . Kerberos Authentication : MY . DOMAIN SERVER . MY . DOMAIN SERVER . MY . DOMAIN Change adapter to enter virtual environment (No internet access from here). Realmd configuration Link sudo realm join my.domain -U 'Administrator@MY.DOMAIN' -v Setting up realmd: (To discover and join windows domain) sudo nano /etc/realmd.conf [users] default-home = /home/%D/%U default-shell = /bin/bash [active-directory] default-client = sssd os-name = Ubuntu Desktop Linux os-version = 18.10 [service] automatic-install = no [my.domain] fully-qualified-names = no automatic-id-mapping = yes user-principal = yes manage-system = no Join the Ubuntu machine on the AD domain: (Kerberos) Link sudo kinit Administrator @ MY . DOMAIN Password for Administrator @ MY . DOMAIN : Setup homedir auto - creation for new users : sudo vi / etc / pam . d / common - session ... session required pam_unix . so session optional pam_winbind . so session optional pam_sss . so session optional pam_systemd . so session required pam_mkhomedir . so skel =/ etc / skel / umask = 0077 ... Final Check: Link Restart the machine and try to login using the Ubuntu graphical login by domain user and password. my.domain\\user To-Do NTP Configure to use AD servers or local source. Add Domian administors to local SUDO group. Configure Ubuntu to use Static IP address.","title":"AD Join"},{"location":"adjoin/#active-directory-join-ubuntu-desktop","text":"","title":"Active Directory Join - Ubuntu Desktop"},{"location":"adjoin/#windows-server-domain-controller","text":"Static IP: 192.168.0.15 /24 domain: my.domain server: server User account: test.user Features (Roles): ADDS (Domain contorller) DHCP DNS","title":"Windows Server Domain Controller"},{"location":"adjoin/#ubuntu-client-ver-1804-1810-194","text":"Open terminal, Install Required Packages. During the installation fill in your AD Domain information. Most be in captial or this will fail. sudo apt update sudo apt - get - y install realmd sssd sssd - tools samba - common krb5 - user packagekit samba - common - bin samba - libs adcli ntp . Kerberos Authentication : MY . DOMAIN SERVER . MY . DOMAIN SERVER . MY . DOMAIN Change adapter to enter virtual environment (No internet access from here).","title":"Ubuntu client: (ver 18.04 / 18.10 / 19.4)"},{"location":"adjoin/#realmd-configuration","text":"sudo realm join my.domain -U 'Administrator@MY.DOMAIN' -v Setting up realmd: (To discover and join windows domain) sudo nano /etc/realmd.conf [users] default-home = /home/%D/%U default-shell = /bin/bash [active-directory] default-client = sssd os-name = Ubuntu Desktop Linux os-version = 18.10 [service] automatic-install = no [my.domain] fully-qualified-names = no automatic-id-mapping = yes user-principal = yes manage-system = no","title":"Realmd configuration"},{"location":"adjoin/#join-the-ubuntu-machine-on-the-ad-domain-kerberos","text":"sudo kinit Administrator @ MY . DOMAIN Password for Administrator @ MY . DOMAIN : Setup homedir auto - creation for new users : sudo vi / etc / pam . d / common - session ... session required pam_unix . so session optional pam_winbind . so session optional pam_sss . so session optional pam_systemd . so session required pam_mkhomedir . so skel =/ etc / skel / umask = 0077 ...","title":"Join the Ubuntu machine on the AD domain: (Kerberos)"},{"location":"adjoin/#final-check","text":"Restart the machine and try to login using the Ubuntu graphical login by domain user and password. my.domain\\user To-Do NTP Configure to use AD servers or local source. Add Domian administors to local SUDO group. Configure Ubuntu to use Static IP address.","title":"Final Check:"},{"location":"rocketchat/","text":"Rocketchat - Quick installtion Link Please follow previous documation about installation of Ubuntu. Will need to install Docker and Docker-Compose. sudo mkdir -p /var/www/rocket.chat/data/runtime/db sudo mkdir -p /var/www/rocket.chat/data/dump sudo nano /var/www/rocket.chat/docker-compose.yml Edit the ROOT_URL value to be your FQDN. Edit the ROCKETCHAT_URL to be your public IP address. Keep the port (3000) the same. Edit ROCKETCHAT_USER, ROCKETCHAT_PASSWORD, and BOT_NAME. If your Rocket.Chat docker instance is behind a proxy, set the additional env-variable \u201cAccounts_UseDNSDomainCheck\u201d to \u201cfalse\u201d (this only works, if these is a completely new deployment) version : ' 2 ' services : rocketchat : image : rocket . chat : latest command : bash - c ' for i in `seq 1 30`; do node main.js && s=$$? && break || s=$$?; echo \"Tried $$i times. Waiting 5 secs...\"; sleep 5; done; (exit $$s) ' restart : unless - stopped volumes : - . / uploads : / app / uploads environment : - PORT = 3000 - ROOT_URL = http : // chat . inumio . com - MONGO_URL = mongodb : // mongo : 27017 / rocketchat - MONGO_OPLOG_URL = mongodb : // mongo : 27017 / local - Accounts_UseDNSDomainCheck = True depends_on : - mongo ports : - 3000 : 3000 mongo : image : mongo : 4 . 0 restart : unless - stopped volumes : - . / data / db : / data / db - . / data / dump : / dump command : mongod -- smallfiles -- oplogSize 128 -- replSet rs0 -- storageEngine = mmapv1 # this container ' s job is just run the command to initialize the replica set. # it will run the command and remove himself ( it will not stay running ) mongo - init - replica : image : mongo command : ' bash -c \"for i in `seq 1 30`; do mongo mongo/rocketchat --eval \\\"rs.initiate({ _id: '' rs0 '' , members: [ { _id: 0, host: '' localhost:27017 '' } ]})\\\" && s=$$? && break || s=$$?; echo \\\"Tried $$i times. Waiting 5 secs...\\\"; sleep 5; done; (exit $$s)\" ' depends_on : - mongo # hubot , the popular chatbot ( add the bot user first and change the password before starting this image ) hubot : image : rocketchat / hubot - rocketchat : latest restart : unless - stopped environment : - ROCKETCHAT_URL = 165 . 114 . 165 . 21 : 3000 - ROCKETCHAT_ROOM = GENERAL - ROCKETCHAT_USER = bot - ROCKETCHAT_PASSWORD = botpassword - BOT_NAME = bot # you can add more scripts as you ' d like here, they need to be installable by npm - EXTERNAL_SCRIPTS = hubot - help , hubot - seen , hubot - links , hubot - diagnostics depends_on : - rocketchat volumes : - . / scripts : / home / hubot / scripts # this is used to expose the hubot port for notifications on the host on port 3001 , e . g . for hubot - jenkins - notifier ports : - 3001 : 8080 Start the services by: Link docker-compose up -d","title":"RocketChat"},{"location":"rocketchat/#rocketchat-quick-installtion","text":"Please follow previous documation about installation of Ubuntu. Will need to install Docker and Docker-Compose. sudo mkdir -p /var/www/rocket.chat/data/runtime/db sudo mkdir -p /var/www/rocket.chat/data/dump sudo nano /var/www/rocket.chat/docker-compose.yml Edit the ROOT_URL value to be your FQDN. Edit the ROCKETCHAT_URL to be your public IP address. Keep the port (3000) the same. Edit ROCKETCHAT_USER, ROCKETCHAT_PASSWORD, and BOT_NAME. If your Rocket.Chat docker instance is behind a proxy, set the additional env-variable \u201cAccounts_UseDNSDomainCheck\u201d to \u201cfalse\u201d (this only works, if these is a completely new deployment) version : ' 2 ' services : rocketchat : image : rocket . chat : latest command : bash - c ' for i in `seq 1 30`; do node main.js && s=$$? && break || s=$$?; echo \"Tried $$i times. Waiting 5 secs...\"; sleep 5; done; (exit $$s) ' restart : unless - stopped volumes : - . / uploads : / app / uploads environment : - PORT = 3000 - ROOT_URL = http : // chat . inumio . com - MONGO_URL = mongodb : // mongo : 27017 / rocketchat - MONGO_OPLOG_URL = mongodb : // mongo : 27017 / local - Accounts_UseDNSDomainCheck = True depends_on : - mongo ports : - 3000 : 3000 mongo : image : mongo : 4 . 0 restart : unless - stopped volumes : - . / data / db : / data / db - . / data / dump : / dump command : mongod -- smallfiles -- oplogSize 128 -- replSet rs0 -- storageEngine = mmapv1 # this container ' s job is just run the command to initialize the replica set. # it will run the command and remove himself ( it will not stay running ) mongo - init - replica : image : mongo command : ' bash -c \"for i in `seq 1 30`; do mongo mongo/rocketchat --eval \\\"rs.initiate({ _id: '' rs0 '' , members: [ { _id: 0, host: '' localhost:27017 '' } ]})\\\" && s=$$? && break || s=$$?; echo \\\"Tried $$i times. Waiting 5 secs...\\\"; sleep 5; done; (exit $$s)\" ' depends_on : - mongo # hubot , the popular chatbot ( add the bot user first and change the password before starting this image ) hubot : image : rocketchat / hubot - rocketchat : latest restart : unless - stopped environment : - ROCKETCHAT_URL = 165 . 114 . 165 . 21 : 3000 - ROCKETCHAT_ROOM = GENERAL - ROCKETCHAT_USER = bot - ROCKETCHAT_PASSWORD = botpassword - BOT_NAME = bot # you can add more scripts as you ' d like here, they need to be installable by npm - EXTERNAL_SCRIPTS = hubot - help , hubot - seen , hubot - links , hubot - diagnostics depends_on : - rocketchat volumes : - . / scripts : / home / hubot / scripts # this is used to expose the hubot port for notifications on the host on port 3001 , e . g . for hubot - jenkins - notifier ports : - 3001 : 8080","title":"Rocketchat - Quick installtion"},{"location":"rocketchat/#start-the-services-by","text":"docker-compose up -d","title":"Start the services by:"},{"location":"ssh-config/","text":"Check to see the identity list ssh-add -l","title":"Ssh config"},{"location":"terminals-load/","text":"Load multiple Terminals Save as apps_load.sh Make the saved file executable. Run from the terminal or double-click from the GUI. Load multiple Terminals Link Enable Tabs support for your terminal. Each application or service you want to load must be already installed. sudo -i apt install htop apt install sensors apt install iftop Docker is installed separately or another service you want to monitor. Create script using a text editor and once saved make as script. Save as apps_load.sh Link #!/bin/sh gnome-terminal --app-id us.kirkland.terminals.byobu -e byobu \\ --tab -e \"htop\" \\ --tab -e \"watch sensors\" \\ --tab -e \"watch docker ps -a\" \\ --tab -e \"sudo iftop\" \\ The sudo command will require you to enter the password, click tab. Make the saved file executable. Link chmod u + x apps_load . sh Run from the terminal or double-click from the GUI. Link ./apps_load.sh","title":"Terminal"},{"location":"terminals-load/#load-multiple-terminals","text":"Enable Tabs support for your terminal. Each application or service you want to load must be already installed. sudo -i apt install htop apt install sensors apt install iftop Docker is installed separately or another service you want to monitor. Create script using a text editor and once saved make as script.","title":"Load multiple Terminals"},{"location":"terminals-load/#save-as-apps_loadsh","text":"#!/bin/sh gnome-terminal --app-id us.kirkland.terminals.byobu -e byobu \\ --tab -e \"htop\" \\ --tab -e \"watch sensors\" \\ --tab -e \"watch docker ps -a\" \\ --tab -e \"sudo iftop\" \\ The sudo command will require you to enter the password, click tab.","title":"Save as apps_load.sh"},{"location":"terminals-load/#make-the-saved-file-executable","text":"chmod u + x apps_load . sh","title":"Make the saved file executable."},{"location":"terminals-load/#run-from-the-terminal-or-double-click-from-the-gui","text":"./apps_load.sh","title":"Run from the terminal or double-click from the GUI."},{"location":"ubuntu/","text":"Ubuntu Post Installation Configuration Add New Account. TimeZone and NTP Server Update Setup Autoremove Upgrade distribution Create Private Key Pair Reboot and login as new user. Ubuntu Post Installation Configuration Link After installation of Ubuntu, make the following changes as required. Most commands will require sudo acess, sudo -i before continuing. Add New Account. Link New account if don't to want use the one setup during installation of the operating system. adduser mjones usermod -a -G sudo mjones TimeZone and NTP Link This will insure correct timezone for the system. dpkg-reconfigure tzdata apt install ntp service ntp status date Server Update Link Only run individual or both together. apt update -y apt upgrade -y or apt update && apt upgrade -y Setup Autoremove Link This setup monthly clean up of the system. apt autoremove -y sh -c 'echo \" apt autoremove -y\" >> /etc/cron.monthly/autoremove' chmod +x /etc/cron.monthly/autoremove Upgrade distribution Link Warning This should only be run if you want to upgrade from the current release to the next. apt dist-upgrade Create Private Key Pair Link Only create key if you have installed ssh-server or want to access another system remotley. ssh-keygen ssh-copy-id mjones@ [ server IP ] Reboot and login as new user. Link sudo -i or su","title":"Ubuntu"},{"location":"ubuntu/#ubuntu-post-installation-configuration","text":"After installation of Ubuntu, make the following changes as required. Most commands will require sudo acess, sudo -i before continuing.","title":"Ubuntu Post Installation Configuration"},{"location":"ubuntu/#add-new-account","text":"New account if don't to want use the one setup during installation of the operating system. adduser mjones usermod -a -G sudo mjones","title":"Add New Account."},{"location":"ubuntu/#timezone-and-ntp","text":"This will insure correct timezone for the system. dpkg-reconfigure tzdata apt install ntp service ntp status date","title":"TimeZone and NTP"},{"location":"ubuntu/#server-update","text":"Only run individual or both together. apt update -y apt upgrade -y or apt update && apt upgrade -y","title":"Server Update"},{"location":"ubuntu/#setup-autoremove","text":"This setup monthly clean up of the system. apt autoremove -y sh -c 'echo \" apt autoremove -y\" >> /etc/cron.monthly/autoremove' chmod +x /etc/cron.monthly/autoremove","title":"Setup Autoremove"},{"location":"ubuntu/#upgrade-distribution","text":"Warning This should only be run if you want to upgrade from the current release to the next. apt dist-upgrade","title":"Upgrade distribution"},{"location":"ubuntu/#create-private-key-pair","text":"Only create key if you have installed ssh-server or want to access another system remotley. ssh-keygen ssh-copy-id mjones@ [ server IP ]","title":"Create Private Key Pair"},{"location":"ubuntu/#reboot-and-login-as-new-user","text":"sudo -i or su","title":"Reboot and login as new user."}]}